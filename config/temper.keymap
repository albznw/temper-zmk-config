/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define QWERTY 1
#define NUM 2
#define NAV 3
#define FUN 4

&sk { quick-release; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_MORPH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPERSAND_MORPH";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };

        mt_balanced: mt_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_BALANCED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        combotab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };

        comboesc {
            bindings = <&kp ESC>;
            key-positions = <7 8>;
            layers = <0>;
        };

        combo_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <11 13>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_braces {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 3>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        combo_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <21 23>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        equals_combo {
            bindings = <&kp KP_EQUAL>;
            key-positions = <19 18>;
            layers = <0>;
            require-prior-idle-ms = <100>;
            timeout-ms = <30>;
        };

        combo_del_word {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <17 18>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <2 3>;
            layers = <0>;
        };

        combo_close_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 16>;
            layers = <0>;
            require-prior-idle-ms = <150>;
            timeout-ms = <25>;
        };

        combo_close_braces {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <6 8>;
            layers = <0>;
        };

        comboMinus {
            bindings = <&kp MINUS>;
            key-positions = <29 28>;
            layers = <0>;
        };

        combo_close_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <26 28>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_j {
            bindings = <&kp J>;
            key-positions = <6 7>;
            timeout-ms = <25>;
            layers = <0>;
        };

        combo_k {
            bindings = <&kp K>;
            key-positions = <26 27>;
            timeout-ms = <25>;
            layers = <0>;
        };

        fn_layer_sticky {
            bindings = <&sl 4>;
            key-positions = <35 30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp F  &kp P      &kp B          &kp J      &kp L      &kp U      &kp Y       &kp APOS
&kp A  &kp R  &kp S  &kp T      &kp G          &kp M      &kp N      &kp E      &kp I       &kp O
&kp Z  &kp X  &kp C  &kp D      &kp V          &kp K      &kp H      &kp COMMA  &dot_colon  &kp SLASH
              &sl 3  &kp SPACE  &smart_shft    &kp ENTER  &bspc_del  &sl 3
            >;
        };

        qwerty_layer {
            bindings = <
&kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P
&kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH
              &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
&kp EXCLAMATION  &kp AT         &kp DOLLAR  &kp GRAVE         &none     &trans          &kp N7  &kp N8  &kp N9  &kp EQUAL
&kp HASH         &kp LESS_THAN  &kp PIPE    &kp GREATER_THAN  &none     &trans          &kp N4  &kp N5  &kp N6  &kp PLUS
&kp BACKSLASH    &kp CARET      &kp KP_DOT  &kp RBKT          &none     &kp N0          &kp N1  &kp N2  &kp N3  &kp MINUS
                                &trans      &trans            &trans    &kp LEFT_SHIFT  &trans  &to 0
            >;
        };

        nav_layer {
            bindings = <
&kp TAB         &trans           &trans     &trans    &trans       &kp LC(H)  &kp LC(J)  &kp LC(K)  &kp LC(L)  &trans
&sk LEFT_SHIFT  &sk LCTRL        &sk LALT   &sk LGUI  &trans       &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp ESC
&kp C_VOL_DN    &kp C_VOLUME_UP  &kp LG(C)  &none     &kp LG(V)    &to 2      &kp LC(D)  &kp LC(U)  &trans     &trans
                                 &trans     &trans    &trans       &trans     &trans     &trans
            >;
        };

        fn_layer {
            bindings = <
&trans        &trans        &trans        &trans  &bootloader    &bootloader     &kp F7  &kp F8  &kp F9  &kp F12
&trans        &trans        &trans        &trans  &trans         &studio_unlock  &kp F4  &kp F5  &kp F6  &kp F11
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &bt BT_CLR     &trans          &kp F1  &kp F2  &kp F3  &kp F10
                            &trans        &trans  &trans         &trans          &trans  &trans
            >;
        };
    };
};
